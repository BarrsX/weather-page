{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["WeeklyForecast","weather","map","day","DailyForecast","Box","display","m","Card","elevation","CardContent","style","height","src","abbr","alt","Typography","highTemp","lowTemp","weatherState","App","useState","query","setQuery","weatherData","setWeatherData","loading","setLoading","toF","cel","Math","round","$","keypress","e","keyCode","output","CircularProgress","Container","TextField","label","onChange","event","target","value","Button","variant","color","onClick","fetch","then","blob","json","data","console","log","woeid","cityData","consolidated_weather","max_temp","min_temp","weather_state_name","weather_state_abbr","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iUA8EA,SAASA,EAAT,GACE,OADmC,EAAXC,QACTC,KAAI,SAAAC,GAAG,OAAI,cAACC,EAAD,CAAeH,QAASE,OAGpD,SAASC,EAAT,GAAqC,IAAZH,EAAW,EAAXA,QACrB,OACE,cAACI,EAAA,EAAD,CAAKC,QAAQ,eAAeC,EAAG,EAA/B,SACE,cAACC,EAAA,EAAD,CAAMC,UAAW,EAAjB,SACE,eAACC,EAAA,EAAD,WACE,qBAAKC,MAAO,CAAEC,OAAQ,KAAOC,IA/E1B,qFA+EwCZ,EAAQa,KAAO,OAAQC,IAAI,iBACtE,eAACC,EAAA,EAAD,oBACSf,EAAQgB,SAAS,uBAD1B,QAEQhB,EAAQiB,QAAQ,uBAFxB,YAGYjB,EAAQkB,uBASjBC,MA1Ff,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEyBF,mBAAS,MAFlC,mBAENG,EAFM,KAEOC,EAFP,OAGiBJ,oBAAS,GAH1B,mBAGNK,EAHM,KAGGC,EAHH,KAKb,SAASC,EAAIC,GACX,OAAOC,KAAKC,MAAa,IAANF,EAAa,IAOlCG,IAAE,QAAQC,UAAS,SAASC,GAC1B,OAAqB,KAAdA,EAAEC,WA+BX,IAAIC,EAAS,KAMb,OALIV,EACFU,EAAS,cAACC,EAAA,EAAD,IACCX,GAA2B,OAAhBF,IACrBY,EAAS,cAACpC,EAAD,CAAgBC,QAASuB,KAGhC,eAACc,EAAA,EAAD,WACE,cAACjC,EAAA,EAAD,CAAKE,EAAG,EAAR,SACE,iCACE,cAACgC,EAAA,EAAD,CAAWC,MAAM,gBAAgBC,SA9C3C,SAAgBC,GACdnB,EAASmB,EAAMC,OAAOC,QA6CqCA,MAAOtB,IAC1D,cAACuB,EAAA,EAAD,CAAQC,QAAQ,YAChBC,MAAM,UACNC,QAzCV,WACErB,GAAW,GACXsB,MAvBY,6FAuBI3B,GACb4B,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAG,GACJC,QAAQC,IAAIF,GACZ,IACMG,EADOH,EAAK,GACCG,MAEvBP,MA7Ba,+EA6BIO,GACdN,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAO,GACJH,QAAQC,IAAIE,GACZ,IACMJ,EADoBI,EAASC,qBACJxD,KAAI,SAAAC,GAKjC,MAAO,CAACc,SAJSW,EAAIzB,EAAIwD,UAIPzC,QAHFU,EAAIzB,EAAIyD,UAGGzC,aAFNhB,EAAI0D,mBAEgB/C,KAD5BX,EAAI2D,uBAGnBnC,GAAW,GACXF,EAAe4B,UAiBX,4BAOLjB,MC7DQ2B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.1312031e.chunk.js","sourcesContent":["import './App.css';\r\nimport { Container, Box, Button, TextField, Card, CardContent, Typography, CircularProgress } from '@material-ui/core';\r\nimport \"fontsource-roboto\";\r\nimport { useState } from 'react';\r\nimport $ from 'jquery';\r\n\r\nconst cityURL = 'https://corsanywhere.herokuapp.com/https://www.metaweather.com/api/location/search/?query=';\r\nconst woeidURL = 'https://corsanywhere.herokuapp.com/https://www.metaweather.com/api/location/';\r\nconst imgURL = 'https://corsanywhere.herokuapp.com/https://www.metaweather.com/static/img/weather/';\r\n\r\nfunction App() {\r\n  const [query, setQuery] = useState('');\r\n  const [weatherData, setWeatherData] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  function toF(cel){\r\n    return Math.round((cel * 1.8) + 32);\r\n  }\r\n\r\n  function onType(event) {\r\n    setQuery(event.target.value);\r\n  }\r\n\r\n  $('form').keypress(function(e) { \r\n    return e.keyCode !== 13;\r\n  });\r\n\r\n  function fetchWeatherData() {\r\n    setLoading(true);\r\n    fetch(cityURL + query)\r\n      .then(blob => blob.json())\r\n      .then(data => {\r\n        console.log(data);\r\n        const city = data[0];\r\n        const woeid = city.woeid;\r\n\r\n    fetch(woeidURL + woeid)\r\n      .then(blob => blob.json())\r\n      .then(cityData => {\r\n        console.log(cityData);\r\n        const weeklyWeatherData = cityData.consolidated_weather;\r\n        const data = weeklyWeatherData.map(day => {\r\n          const highTemp = toF(day.max_temp);\r\n          const lowTemp = toF(day.min_temp);\r\n          const weatherState = day.weather_state_name;\r\n          const abbr = day.weather_state_abbr;\r\n          return {highTemp, lowTemp, weatherState, abbr};\r\n        });\r\n        setLoading(false);\r\n        setWeatherData(data);\r\n      })\r\n    })\r\n  }\r\n\r\n\r\n  let output = null;\r\n  if (loading){\r\n    output = <CircularProgress />\r\n  } else if (!loading && weatherData !== null) {\r\n    output = <WeeklyForecast weather={weatherData}/>};\r\n\r\n  return (\r\n      <Container>\r\n        <Box m={5}>\r\n          <form>\r\n            <TextField label='Enter a City!' onChange={onType} value={query} />\r\n            <Button variant='contained'\r\n            color='primary'\r\n            onClick={fetchWeatherData}\r\n            >Click me!\r\n          </Button>\r\n          </form>\r\n        </Box>\r\n      {output}\r\n      </Container>\r\n  );\r\n}\r\n\r\nfunction WeeklyForecast({ weather }) {\r\n  return weather.map(day => <DailyForecast weather={day} />)\r\n}\r\n\r\nfunction DailyForecast({ weather }) {\r\n    return (\r\n      <Box display='inline-block' m={1}>\r\n        <Card elevation={5}>\r\n          <CardContent>\r\n            <img style={{ height: 140 }} src={imgURL + weather.abbr + '.svg'} alt='Weather card'></img>\r\n            <Typography>\r\n              High: {weather.highTemp}<br />\r\n              Low: {weather.lowTemp}<br />\r\n              Weather: {weather.weatherState}\r\n            </Typography>\r\n          </CardContent>\r\n      </Card>\r\n    </Box>\r\n  );\r\n}\r\n\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}