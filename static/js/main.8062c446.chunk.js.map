{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["WeeklyForcast","weather","map","day","DailyForcast","Box","display","m","Card","elevation","CardContent","style","height","src","abbr","alt","Typography","highTemp","lowTemp","weatherState","App","useState","query","setQuery","weatherData","setWeatherData","loading","setLoading","toF","cel","Math","round","output","CircularProgress","Container","TextField","label","onChange","event","target","value","Button","variant","color","onClick","fetch","then","blob","json","data","console","log","woeid","cityData","consolidated_weather","max_temp","min_temp","weather_state_name","weather_state_abbr","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2NAAe,I,qFCwEf,SAASA,EAAT,GACE,OADkC,EAAXC,QACRC,KAAI,SAAAC,GAAG,OAAI,cAACC,EAAD,CAAcH,QAASE,OAGnD,SAASC,EAAT,GAAoC,IAAZH,EAAW,EAAXA,QACpB,OACE,cAACI,EAAA,EAAD,CAAKC,QAAQ,eAAeC,EAAG,EAA/B,SACE,cAACC,EAAA,EAAD,CAAMC,UAAW,EAAjB,SACE,eAACC,EAAA,EAAD,WACE,qBAAKC,MAAO,CAAEC,OAAQ,KAAOC,IAzE1B,qFAyEwCZ,EAAQa,KAAO,OAAQC,IAAI,iBACtE,eAACC,EAAA,EAAD,oBACSf,EAAQgB,SAAS,uBAD1B,QAEQhB,EAAQiB,QAAQ,uBAFxB,YAGYjB,EAAQkB,uBASjBC,MApFf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEyBF,mBAAS,MAFlC,mBAENG,EAFM,KAEOC,EAFP,OAGiBJ,oBAAS,GAH1B,mBAGNK,EAHM,KAGGC,EAHH,KAKb,SAASC,EAAIC,GACX,OAAOC,KAAKC,MAAa,IAANF,EAAa,IAkClC,IAAIG,EAAS,KAKb,OAJIN,EACFM,EAAS,cAACC,EAAA,EAAD,IACCP,GAA2B,OAAhBF,IACrBQ,EAAS,cAAChC,EAAD,CAAeC,QAASuB,KAE/B,eAACU,EAAA,EAAD,WACE,cAAC7B,EAAA,EAAD,CAAKE,EAAG,EAAR,SACE,iCACE,cAAC4B,EAAA,EAAD,CAAWC,MAAM,gBAAgBC,SAxC3C,SAAgBC,GACdf,EAASe,EAAMC,OAAOC,QAuCqCA,MAAOlB,IAC1D,cAACmB,EAAA,EAAD,CAAQC,QAAQ,YAChBC,MAAM,UACNC,QAvCV,WACEjB,GAAW,GACXkB,MAnBY,6FAmBIvB,GACbwB,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAG,GACJC,QAAQC,IAAIF,GACZ,IACMG,EADOH,EAAK,GACCG,MAEvBP,MAzBa,+EAyBIO,GACdN,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAO,GACJH,QAAQC,IAAIE,GACZ,IACMJ,EADoBI,EAASC,qBACJpD,KAAI,SAAAC,GAKjC,MAAO,CAACc,SAJSW,EAAIzB,EAAIoD,UAIPrC,QAHFU,EAAIzB,EAAIqD,UAGGrC,aAFNhB,EAAIsD,mBAEgB3C,KAD5BX,EAAIuD,uBAGnB/B,GAAW,GACXF,EAAewB,UAeX,4BAOLjB,MCvDQ2B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.8062c446.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport { Container, Box, Button, TextField, Card, CardContent, Typography, CircularProgress } from '@material-ui/core';\nimport \"fontsource-roboto\";\nimport { useState } from 'react';\n\nconst cityURL = 'https://corsanywhere.herokuapp.com/https://www.metaweather.com/api/location/search/?query=';\nconst woeidURL = 'https://corsanywhere.herokuapp.com/https://www.metaweather.com/api/location/';\nconst imgURL = 'https://corsanywhere.herokuapp.com/https://www.metaweather.com/static/img/weather/';\n\nfunction App() {\n  const [query, setQuery] = useState('');\n  const [weatherData, setWeatherData] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  function toF(cel){\n    return Math.round((cel * 1.8) + 32);\n  }\n\n  function onType(event) {\n    setQuery(event.target.value);\n  }\n\n  function fetchWeatherData() {\n    setLoading(true);\n    fetch(cityURL + query)\n      .then(blob => blob.json())\n      .then(data => {\n        console.log(data);\n        const city = data[0];\n        const woeid = city.woeid;\n\n    fetch(woeidURL + woeid)\n      .then(blob => blob.json())\n      .then(cityData => {\n        console.log(cityData);\n        const weeklyWeatherData = cityData.consolidated_weather;\n        const data = weeklyWeatherData.map(day => {\n          const highTemp = toF(day.max_temp);\n          const lowTemp = toF(day.min_temp);\n          const weatherState = day.weather_state_name;\n          const abbr = day.weather_state_abbr;\n          return {highTemp, lowTemp, weatherState, abbr};\n        });\n        setLoading(false);\n        setWeatherData(data);\n      })\n    })\n  }\n\n  let output = null;\n  if (loading){\n    output = <CircularProgress />\n  } else if (!loading && weatherData !== null) {\n    output = <WeeklyForcast weather={weatherData}/>};\n  return (\n      <Container>\n        <Box m={5}>\n          <form>\n            <TextField label='Enter a City!' onChange={onType} value={query} />\n            <Button variant='contained'\n            color='primary'\n            onClick={fetchWeatherData}\n            >Click me!\n          </Button>\n          </form>\n        </Box>\n      {output}\n      </Container>\n  );\n}\n\nfunction WeeklyForcast({ weather }) {\n  return weather.map(day => <DailyForcast weather={day} />)\n}\n\nfunction DailyForcast({ weather }) {\n    return (\n      <Box display='inline-block' m={1}>\n        <Card elevation={5}>\n          <CardContent>\n            <img style={{ height: 140 }} src={imgURL + weather.abbr + '.svg'} alt='Weather card'></img>\n            <Typography>\n              High: {weather.highTemp}<br />\n              Low: {weather.lowTemp}<br />\n              Weather: {weather.weatherState}\n            </Typography>\n          </CardContent>\n      </Card>\n    </Box>\n  );\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}